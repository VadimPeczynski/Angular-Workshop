Komunikaty dla różnych typów błędów
[ngClass]="{
            'is-invalid':
              (nameField.touched || nameField.dirty) && !nameField.valid
          }"

<span class="invalid-feedback">
          <span *ngIf="nameField.errors?.required">
            Proszę podaj imię bohatera.
          </span>
          <span *ngIf="nameField.errors?.minlength">
            Imię musi być dłuższe niż 3 litery.
          </span>
        </span>

ReactiveForms

1. Inicjalizacja FormGroup

heroForm: FormGroup;

this.heroForm = new FormGroup({
      name: new FormControl(),
      team: new FormControl(),
      secretIdentity: new FormControl(),
      salary: new FormControl(),
      strength: new FormControl(),
      description: new FormControl(),
      active: new FormControl(),
    });

2. Template

[formGroup]="heroForm"

formControlName="name"
formControlName="team"
formControlName="secretIdentity"
formControlName="salary"
formControlName="strength"
formControlName="description"
formControlName="active"

3. FormBuilder

this.heroForm = this.fb.group({
      name: null,
      team: null,
      secretIdentity: '',
      salary: 0,
      strength: 0,
      description: '',
      active: true,
    });

4. Walidacja

this.heroForm = this.fb.group({
      name: [null, [Validators.required, Validators.minLength(3)]],
      team: [null, Validators.required],
      secretIdentity: '',
      salary: [0, Validators.min(0)],
      strength: [0, [Validators.min(0), Validators.max(0)]],
      description: '',
      active: true,
    });

5. Funkcja walidatora

function customValidator(control: AbstractControl): {[key: string]: boolean} | null {
    return isSomethingWrong ? {'customValidator': true} : null;
  };

6. Funkcja walidatora z parametrami

function customValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): {[key: string]: boolean} | null => {
    return isSomethingWrong ? {'customValidator': true} : null;
  };
}

7. Obserwowanie kontrolki
activeValueSubs: Subscription = new Subscription();

this.activeValueSubs = this.heroForm
      .get('active')
      .valueChanges.subscribe((value: boolean) => {
        this.activeChanged(value);
      });

8. Wyświetlanie wiadomości z błedem
const nameControl = this.heroForm.get('name');
    this.nameValueSubs = nameControl.valueChanges.subscribe(
      (value: boolean) => {
        this.setErrorMessage(nameControl);
      }
    );

9. Wyświetlanie istniejącego bohatera

this.heroForm.setValue({
          name: hero.name,
          team: hero.team,
          secretIdentity: hero.secretIdentity,
          salary: hero.salary,
          strength: hero.strength,
          description: hero.description,
          active: hero.active,
        });

10. Kopiowanie danych z formularza

const hero = { ...this.hero, ...this.heroForm.value };



Lokalizacja

1. Instalacja

npm install @ngx-translate/core --save

2. Inicjalizacja

import {TranslateModule} from '@ngx-translate/core';

TranslateModule.forRoot()

3. Loader

npm install @ngx-translate/http-loader --save

import {TranslateHttpLoader} from '@ngx-translate/http-loader';

export function HttpLoaderFactory(http: HttpClient) {
  return new TranslateHttpLoader(http);
}

loader: {
                provide: TranslateLoader,
                useFactory: HttpLoaderFactory,
                deps: [HttpClient]
            }

4. Załadowanie tłumaczeń
constructor(translate: TranslateService) {
    // this language will be used as a fallback when a translation isn't found in the current language
    translate.setDefaultLang('pl');

    // the lang to use, if the lang isn't available, it will use the current loader to get them
    translate.use('pl');
  }

5. Ekstrakcja tłumaczeń

npm install @biesbjerg/ngx-translate-extract --save-dev

6. Skrypty

"i18n:init": "ngx-translate-extract --input ./src --output ./src/assets/i18n/template.json --key-as-default-value --replace --format json",
  "i18n:extract": "ngx-translate-extract --input ./src --output ./src/assets/i18n/pl.json ./src/assets/i18n/en.json --clean --format json",

7. Zmiana języka

<li class="nav-item dropdown">
        <select
          class="form-control"
          id="language"
          [(ngModel)]="language"
          (change)="onLanguageChange()"
        >
          <option value="pl" selected>pl</option>
          <option value="en">en</option>
        </select>
      </li>

onLanguageChange(): void {
    this.translate.use(this.language);
  }

8. Tłumaczenie z parametrem

{{ 'HELLO' | translate:{param:1} }}

9. Tłumaczenie z kodu

translate.get('HELLO', {value: 'world'}).subscribe((res: string) => {
    console.log(res);
    //=> 'hello world'
});



Deploy aplikacji

0. Budowanie aplikacji

ng build --prod

1. Instalacja

npm install -g firebase-tools

2. Logowanie

firebase login

3. Inicjalizacja

firebase init

4. Testowanie

firebase emulators:start

5. Deploy

firebase deploy --only hosting:nazwa-projektu-firebase

